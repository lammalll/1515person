package tw.com.softleader.e5e5.entity;
// Generated 2015/12/14 �U�� 06:40:08 by Hibernate Tools 4.3.1.Final

import java.util.Date;
import java.util.HashSet;
import java.util.Set;
import javax.persistence.Column;
import javax.persistence.Entity;
import javax.persistence.FetchType;
import javax.persistence.Id;
import javax.persistence.OneToMany;
import javax.persistence.Table;
import javax.persistence.Temporal;
import javax.persistence.TemporalType;

/**
 * Thread generated by hbm2java
 */
@Entity
@Table(name = "thread", schema = "dbo", catalog = "EEIT82DB")
public class Thread implements java.io.Serializable {

	private int id;
	private String title;
	private Date createdDate;
	private String threadContent;
	private Integer hit;
	private Integer replayCount;
	private Date lastReplyDate;
	private Character isReadonly;
	private Character topped;
	private int boardId;
	private Integer userId;
	private Set<ForumPicture> forumPictures = new HashSet<ForumPicture>(0);
	private Set<Reply> replies = new HashSet<Reply>(0);

	public Thread() {
	}

	public Thread(int id, String title, String threadContent, int boardId) {
		this.id = id;
		this.title = title;
		this.threadContent = threadContent;
		this.boardId = boardId;
	}

	public Thread(int id, String title, Date createdDate, String threadContent, Integer hit, Integer replayCount,
			Date lastReplyDate, Character isReadonly, Character topped, int boardId, Integer userId,
			Set<ForumPicture> forumPictures, Set<Reply> replies) {
		this.id = id;
		this.title = title;
		this.createdDate = createdDate;
		this.threadContent = threadContent;
		this.hit = hit;
		this.replayCount = replayCount;
		this.lastReplyDate = lastReplyDate;
		this.isReadonly = isReadonly;
		this.topped = topped;
		this.boardId = boardId;
		this.userId = userId;
		this.forumPictures = forumPictures;
		this.replies = replies;
	}

	@Id

	@Column(name = "id", unique = true, nullable = false)
	public int getId() {
		return this.id;
	}

	public void setId(int id) {
		this.id = id;
	}

	@Column(name = "title", nullable = false, length = 20)
	public String getTitle() {
		return this.title;
	}

	public void setTitle(String title) {
		this.title = title;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "created_date", length = 23)
	public Date getCreatedDate() {
		return this.createdDate;
	}

	public void setCreatedDate(Date createdDate) {
		this.createdDate = createdDate;
	}

	@Column(name = "thread_content", nullable = false)
	public String getThreadContent() {
		return this.threadContent;
	}

	public void setThreadContent(String threadContent) {
		this.threadContent = threadContent;
	}

	@Column(name = "hit")
	public Integer getHit() {
		return this.hit;
	}

	public void setHit(Integer hit) {
		this.hit = hit;
	}

	@Column(name = "replay_count")
	public Integer getReplayCount() {
		return this.replayCount;
	}

	public void setReplayCount(Integer replayCount) {
		this.replayCount = replayCount;
	}

	@Temporal(TemporalType.TIMESTAMP)
	@Column(name = "last_reply_date", length = 23)
	public Date getLastReplyDate() {
		return this.lastReplyDate;
	}

	public void setLastReplyDate(Date lastReplyDate) {
		this.lastReplyDate = lastReplyDate;
	}

	@Column(name = "is_readonly", length = 1)
	public Character getIsReadonly() {
		return this.isReadonly;
	}

	public void setIsReadonly(Character isReadonly) {
		this.isReadonly = isReadonly;
	}

	@Column(name = "topped", length = 1)
	public Character getTopped() {
		return this.topped;
	}

	public void setTopped(Character topped) {
		this.topped = topped;
	}

	@Column(name = "board_id", nullable = false)
	public int getBoardId() {
		return this.boardId;
	}

	public void setBoardId(int boardId) {
		this.boardId = boardId;
	}

	@Column(name = "user_id")
	public Integer getUserId() {
		return this.userId;
	}

	public void setUserId(Integer userId) {
		this.userId = userId;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "thread")
	public Set<ForumPicture> getForumPictures() {
		return this.forumPictures;
	}

	public void setForumPictures(Set<ForumPicture> forumPictures) {
		this.forumPictures = forumPictures;
	}

	@OneToMany(fetch = FetchType.LAZY, mappedBy = "thread")
	public Set<Reply> getReplies() {
		return this.replies;
	}

	public void setReplies(Set<Reply> replies) {
		this.replies = replies;
	}

}
